
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000496  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000496  0000052a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800064  00800064  0000052e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d0  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003cb  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ed  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016c  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	54 c0       	rjmp	.+168    	; 0xac <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__vector_8>
  12:	3b c0       	rjmp	.+118    	; 0x8a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e9       	ldi	r30, 0x96	; 150
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	76 d0       	rcall	.+236    	; 0x146 <main>
  5a:	1b c2       	rjmp	.+1078   	; 0x492 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_8>:
volatile uint16_t pwmIn = 2000;
volatile uint16_t pwmOut = 2000;
//volatile uint8_t timeout = 0;

// manual PWM, adakah cara yang lebih baik? ._.
ISR(TIMER1_OVF_vect){
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
	PORTB |= (1<<2);
  68:	c2 9a       	sbi	0x18, 2	; 24
}
  6a:	0f 90       	pop	r0
  6c:	0f be       	out	0x3f, r0	; 63
  6e:	0f 90       	pop	r0
  70:	1f 90       	pop	r1
  72:	18 95       	reti

00000074 <__vector_6>:
ISR(TIMER1_COMPA_vect){
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
	PORTB &= ~(1<<2);
  7e:	c2 98       	cbi	0x18, 2	; 24
}
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <__vector_9>:

// pwnhitung pwm input
ISR(TIMER0_OVF_vect){
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
	timerH++;
  96:	80 91 64 00 	lds	r24, 0x0064
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 64 00 	sts	0x0064, r24
}
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_1>:
ISR(INT0_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	3f 93       	push	r19
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	uint16_t timeNow = ((uint16_t)timerH<<8) | TCNT0;
  be:	80 91 64 00 	lds	r24, 0x0064
  c2:	92 b7       	in	r25, 0x32	; 50
  c4:	38 2f       	mov	r19, r24
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	89 2f       	mov	r24, r25
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	82 2b       	or	r24, r18
  ce:	93 2b       	or	r25, r19
	//PORTB = (~PORTB)&0x07;
	if( PIND&(1<<2) ){ // awal sinyal pwm
  d0:	82 9b       	sbis	0x10, 2	; 16
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <__vector_1+0x34>
		PORTB |= (1<<1);
  d4:	c1 9a       	sbi	0x18, 1	; 24
		time0 = timeNow;
  d6:	90 93 66 00 	sts	0x0066, r25
  da:	80 93 65 00 	sts	0x0065, r24
  de:	2a c0       	rjmp	.+84     	; 0x134 <__vector_1+0x88>
	}else{ // akhir sinyal pwm
		PORTB &= ~(1<<1);
  e0:	c1 98       	cbi	0x18, 1	; 24
		time1 = timeNow;
  e2:	90 93 68 00 	sts	0x0068, r25
  e6:	80 93 67 00 	sts	0x0067, r24
		pwmIn = (time1-time0);
  ea:	80 91 67 00 	lds	r24, 0x0067
  ee:	90 91 68 00 	lds	r25, 0x0068
  f2:	20 91 65 00 	lds	r18, 0x0065
  f6:	30 91 66 00 	lds	r19, 0x0066
  fa:	82 1b       	sub	r24, r18
  fc:	93 0b       	sbc	r25, r19
  fe:	90 93 61 00 	sts	0x0061, r25
 102:	80 93 60 00 	sts	0x0060, r24
		if(pwmIn<2000) pwmIn = 2000;
 106:	80 91 60 00 	lds	r24, 0x0060
 10a:	90 91 61 00 	lds	r25, 0x0061
 10e:	80 5d       	subi	r24, 0xD0	; 208
 110:	97 40       	sbci	r25, 0x07	; 7
 112:	18 f4       	brcc	.+6      	; 0x11a <__vector_1+0x6e>
 114:	80 ed       	ldi	r24, 0xD0	; 208
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	09 c0       	rjmp	.+18     	; 0x12c <__vector_1+0x80>
		else if(pwmIn>4000) pwmIn = 4000;
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	90 91 61 00 	lds	r25, 0x0061
 122:	81 5a       	subi	r24, 0xA1	; 161
 124:	9f 40       	sbci	r25, 0x0F	; 15
 126:	30 f0       	brcs	.+12     	; 0x134 <__vector_1+0x88>
 128:	80 ea       	ldi	r24, 0xA0	; 160
 12a:	9f e0       	ldi	r25, 0x0F	; 15
 12c:	90 93 61 00 	sts	0x0061, r25
 130:	80 93 60 00 	sts	0x0060, r24
		//OCR1A = pwmIn;
	}
}
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:

int main( void ){
 146:	8f 92       	push	r8
 148:	9f 92       	push	r9
 14a:	af 92       	push	r10
 14c:	bf 92       	push	r11
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29

	DDRB = 0x00;
 15e:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;
 160:	14 ba       	out	0x14, r1	; 20

	// input di PD2 dan PD3 (INT0, INT1)
	DDRD = 0x00;
 162:	11 ba       	out	0x11, r1	; 17

	// output di PB1 dan PB2 (OCR1A, OCR1B
	DDRB = (1<<1) | (1<<2);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	87 bb       	out	0x17, r24	; 23

	// pakai timer0 untuk hitung pwm input
	TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 16c:	12 be       	out	0x32, r1	; 50

	// manual pwm untuk output
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
 16e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
 170:	8a e1       	ldi	r24, 0x1A	; 26
 172:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
 174:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 176:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x4E;
 178:	8e e4       	ldi	r24, 0x4E	; 78
 17a:	87 bd       	out	0x27, r24	; 39
	ICR1L=0x20;
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	86 bd       	out	0x26, r24	; 38
	OCR1AH=0x00;
 180:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
 182:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
 184:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 186:	18 bc       	out	0x28, r1	; 40
//	TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
//	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);

	// external interrupt di INT0 untuk baca pwm
	//PORTD |= 0x02;
	GICR|=(0<<INT1) | (1<<INT0);
 188:	8b b7       	in	r24, 0x3b	; 59
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	85 bf       	out	0x35, r24	; 53
	GIFR=(0<<INTF1) | (1<<INTF0);
 192:	80 e4       	ldi	r24, 0x40	; 64
 194:	8a bf       	out	0x3a, r24	; 58
	
	TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);
 196:	85 e1       	ldi	r24, 0x15	; 21
 198:	89 bf       	out	0x39, r24	; 57

	ADC_Init();
 19a:	4b d0       	rcall	.+150    	; 0x232 <ADC_Init>

	sei();
 19c:	78 94       	sei
 	OCR1A = 2000;
 19e:	80 ed       	ldi	r24, 0xD0	; 208
 1a0:	97 e0       	ldi	r25, 0x07	; 7
 1a2:	9b bd       	out	0x2b, r25	; 43
 1a4:	8a bd       	out	0x2a, r24	; 42
	while(1){
		trimLow  = ADC_Read(0)>>1;
		trimHigh = ADC_Read(1)>>1;
		uint16_t range = 2000-trimHigh-trimLow;
		float value = (float)(pwmIn-2000) * range;
		pwmOut = (uint16_t)value + 2000 + trimLow;
 1a6:	30 ed       	ldi	r19, 0xD0	; 208
 1a8:	83 2e       	mov	r8, r19
 1aa:	37 e0       	ldi	r19, 0x07	; 7
 1ac:	93 2e       	mov	r9, r19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ae:	c0 e9       	ldi	r28, 0x90	; 144
 1b0:	d1 e0       	ldi	r29, 0x01	; 1
	ADC_Init();

	sei();
 	OCR1A = 2000;
	while(1){
		trimLow  = ADC_Read(0)>>1;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	44 d0       	rcall	.+136    	; 0x23e <ADC_Read>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	90 93 6a 00 	sts	0x006A, r25
 1be:	80 93 69 00 	sts	0x0069, r24
		trimHigh = ADC_Read(1)>>1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	3c d0       	rcall	.+120    	; 0x23e <ADC_Read>
 1c6:	5c 01       	movw	r10, r24
 1c8:	b6 94       	lsr	r11
 1ca:	a7 94       	ror	r10
 1cc:	b0 92 6c 00 	sts	0x006C, r11
 1d0:	a0 92 6b 00 	sts	0x006B, r10
		uint16_t range = 2000-trimHigh-trimLow;
 1d4:	c0 90 69 00 	lds	r12, 0x0069
 1d8:	d0 90 6a 00 	lds	r13, 0x006A
		float value = (float)(pwmIn-2000) * range;
 1dc:	60 91 60 00 	lds	r22, 0x0060
 1e0:	70 91 61 00 	lds	r23, 0x0061
		pwmOut = (uint16_t)value + 2000 + trimLow;
 1e4:	60 5d       	subi	r22, 0xD0	; 208
 1e6:	77 40       	sbci	r23, 0x07	; 7
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	61 d0       	rcall	.+194    	; 0x2b0 <__floatunsisf>
 1ee:	7b 01       	movw	r14, r22
 1f0:	8c 01       	movw	r16, r24
 1f2:	b4 01       	movw	r22, r8
 1f4:	6c 19       	sub	r22, r12
 1f6:	7d 09       	sbc	r23, r13
 1f8:	6a 19       	sub	r22, r10
 1fa:	7b 09       	sbc	r23, r11
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	57 d0       	rcall	.+174    	; 0x2b0 <__floatunsisf>
 202:	9b 01       	movw	r18, r22
 204:	ac 01       	movw	r20, r24
 206:	c8 01       	movw	r24, r16
 208:	b7 01       	movw	r22, r14
 20a:	b8 d0       	rcall	.+368    	; 0x37c <__mulsf3>
 20c:	25 d0       	rcall	.+74     	; 0x258 <__fixunssfsi>
 20e:	80 ed       	ldi	r24, 0xD0	; 208
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	c8 0e       	add	r12, r24
 214:	d9 1e       	adc	r13, r25
 216:	6c 0d       	add	r22, r12
 218:	7d 1d       	adc	r23, r13
 21a:	70 93 63 00 	sts	0x0063, r23
 21e:	60 93 62 00 	sts	0x0062, r22
 222:	88 ee       	ldi	r24, 0xE8	; 232
 224:	93 e0       	ldi	r25, 0x03	; 3
 226:	fe 01       	movw	r30, r28
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xe2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <main+0xe0>
 230:	c0 cf       	rjmp	.-128    	; 0x1b2 <main+0x6c>

00000232 <ADC_Init>:
#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))

void ADC_Init(){
	//PORTC |= 0x01;
	//DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
	ADMUX=ADC_VREF_TYPE;
 232:	80 e4       	ldi	r24, 0x40	; 64
 234:	87 b9       	out	0x07, r24	; 7
	//ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
	//ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);

	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 236:	84 e8       	ldi	r24, 0x84	; 132
 238:	86 b9       	out	0x06, r24	; 6
	SFIOR=(0<<ACME);
 23a:	10 be       	out	0x30, r1	; 48
}
 23c:	08 95       	ret

0000023e <ADC_Read>:
uint16_t ADC_Read(uint8_t ch){
	ADMUX = ch | ADC_VREF_TYPE;
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 242:	85 e3       	ldi	r24, 0x35	; 53
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <ADC_Read+0x6>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=(1<<ADSC);
 248:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1<<ADIF))==0);
 24a:	34 9b       	sbis	0x06, 4	; 6
 24c:	fe cf       	rjmp	.-4      	; 0x24a <ADC_Read+0xc>
	ADCSRA|=(1<<ADIF);
 24e:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 250:	24 b1       	in	r18, 0x04	; 4
 252:	35 b1       	in	r19, 0x05	; 5
 254:	c9 01       	movw	r24, r18
 256:	08 95       	ret

00000258 <__fixunssfsi>:
 258:	70 d0       	rcall	.+224    	; 0x33a <__fp_splitA>
 25a:	88 f0       	brcs	.+34     	; 0x27e <__fixunssfsi+0x26>
 25c:	9f 57       	subi	r25, 0x7F	; 127
 25e:	90 f0       	brcs	.+36     	; 0x284 <__fixunssfsi+0x2c>
 260:	b9 2f       	mov	r27, r25
 262:	99 27       	eor	r25, r25
 264:	b7 51       	subi	r27, 0x17	; 23
 266:	a0 f0       	brcs	.+40     	; 0x290 <__fixunssfsi+0x38>
 268:	d1 f0       	breq	.+52     	; 0x29e <__fixunssfsi+0x46>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	1a f0       	brmi	.+6      	; 0x27a <__fixunssfsi+0x22>
 274:	ba 95       	dec	r27
 276:	c9 f7       	brne	.-14     	; 0x26a <__fixunssfsi+0x12>
 278:	12 c0       	rjmp	.+36     	; 0x29e <__fixunssfsi+0x46>
 27a:	b1 30       	cpi	r27, 0x01	; 1
 27c:	81 f0       	breq	.+32     	; 0x29e <__fixunssfsi+0x46>
 27e:	77 d0       	rcall	.+238    	; 0x36e <__fp_zero>
 280:	b1 e0       	ldi	r27, 0x01	; 1
 282:	08 95       	ret
 284:	74 c0       	rjmp	.+232    	; 0x36e <__fp_zero>
 286:	67 2f       	mov	r22, r23
 288:	78 2f       	mov	r23, r24
 28a:	88 27       	eor	r24, r24
 28c:	b8 5f       	subi	r27, 0xF8	; 248
 28e:	39 f0       	breq	.+14     	; 0x29e <__fixunssfsi+0x46>
 290:	b9 3f       	cpi	r27, 0xF9	; 249
 292:	cc f3       	brlt	.-14     	; 0x286 <__fixunssfsi+0x2e>
 294:	86 95       	lsr	r24
 296:	77 95       	ror	r23
 298:	67 95       	ror	r22
 29a:	b3 95       	inc	r27
 29c:	d9 f7       	brne	.-10     	; 0x294 <__fixunssfsi+0x3c>
 29e:	3e f4       	brtc	.+14     	; 0x2ae <__fixunssfsi+0x56>
 2a0:	90 95       	com	r25
 2a2:	80 95       	com	r24
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <__floatunsisf>:
 2b0:	e8 94       	clt
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__floatsisf+0x12>

000002b4 <__floatsisf>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__floatsisf+0x12>
 2b8:	90 95       	com	r25
 2ba:	80 95       	com	r24
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	8f 4f       	sbci	r24, 0xFF	; 255
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	99 23       	and	r25, r25
 2c8:	a9 f0       	breq	.+42     	; 0x2f4 <__floatsisf+0x40>
 2ca:	f9 2f       	mov	r31, r25
 2cc:	96 e9       	ldi	r25, 0x96	; 150
 2ce:	bb 27       	eor	r27, r27
 2d0:	93 95       	inc	r25
 2d2:	f6 95       	lsr	r31
 2d4:	87 95       	ror	r24
 2d6:	77 95       	ror	r23
 2d8:	67 95       	ror	r22
 2da:	b7 95       	ror	r27
 2dc:	f1 11       	cpse	r31, r1
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <__floatsisf+0x1c>
 2e0:	fa f4       	brpl	.+62     	; 0x320 <__floatsisf+0x6c>
 2e2:	bb 0f       	add	r27, r27
 2e4:	11 f4       	brne	.+4      	; 0x2ea <__floatsisf+0x36>
 2e6:	60 ff       	sbrs	r22, 0
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <__floatsisf+0x6c>
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	8f 4f       	sbci	r24, 0xFF	; 255
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <__floatsisf+0x6c>
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <__floatsisf+0x48>
 2f8:	96 e9       	ldi	r25, 0x96	; 150
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <__floatsisf+0x6a>
 2fc:	77 23       	and	r23, r23
 2fe:	21 f0       	breq	.+8      	; 0x308 <__floatsisf+0x54>
 300:	9e e8       	ldi	r25, 0x8E	; 142
 302:	87 2f       	mov	r24, r23
 304:	76 2f       	mov	r23, r22
 306:	05 c0       	rjmp	.+10     	; 0x312 <__floatsisf+0x5e>
 308:	66 23       	and	r22, r22
 30a:	71 f0       	breq	.+28     	; 0x328 <__floatsisf+0x74>
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	86 2f       	mov	r24, r22
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	2a f0       	brmi	.+10     	; 0x320 <__floatsisf+0x6c>
 316:	9a 95       	dec	r25
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	da f7       	brpl	.-10     	; 0x316 <__floatsisf+0x62>
 320:	88 0f       	add	r24, r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__fp_split3>:
 32a:	57 fd       	sbrc	r21, 7
 32c:	90 58       	subi	r25, 0x80	; 128
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	59 f0       	breq	.+22     	; 0x34a <__fp_splitA+0x10>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	71 f0       	breq	.+28     	; 0x354 <__fp_splitA+0x1a>
 338:	47 95       	ror	r20

0000033a <__fp_splitA>:
 33a:	88 0f       	add	r24, r24
 33c:	97 fb       	bst	r25, 7
 33e:	99 1f       	adc	r25, r25
 340:	61 f0       	breq	.+24     	; 0x35a <__fp_splitA+0x20>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	79 f0       	breq	.+30     	; 0x364 <__fp_splitA+0x2a>
 346:	87 95       	ror	r24
 348:	08 95       	ret
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	14 06       	cpc	r1, r20
 350:	55 1f       	adc	r21, r21
 352:	f2 cf       	rjmp	.-28     	; 0x338 <__fp_split3+0xe>
 354:	46 95       	lsr	r20
 356:	f1 df       	rcall	.-30     	; 0x33a <__fp_splitA>
 358:	08 c0       	rjmp	.+16     	; 0x36a <__fp_splitA+0x30>
 35a:	16 16       	cp	r1, r22
 35c:	17 06       	cpc	r1, r23
 35e:	18 06       	cpc	r1, r24
 360:	99 1f       	adc	r25, r25
 362:	f1 cf       	rjmp	.-30     	; 0x346 <__fp_splitA+0xc>
 364:	86 95       	lsr	r24
 366:	71 05       	cpc	r23, r1
 368:	61 05       	cpc	r22, r1
 36a:	08 94       	sec
 36c:	08 95       	ret

0000036e <__fp_zero>:
 36e:	e8 94       	clt

00000370 <__fp_szero>:
 370:	bb 27       	eor	r27, r27
 372:	66 27       	eor	r22, r22
 374:	77 27       	eor	r23, r23
 376:	cb 01       	movw	r24, r22
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__mulsf3>:
 37c:	0b d0       	rcall	.+22     	; 0x394 <__mulsf3x>
 37e:	78 c0       	rjmp	.+240    	; 0x470 <__fp_round>
 380:	69 d0       	rcall	.+210    	; 0x454 <__fp_pscA>
 382:	28 f0       	brcs	.+10     	; 0x38e <__mulsf3+0x12>
 384:	6e d0       	rcall	.+220    	; 0x462 <__fp_pscB>
 386:	18 f0       	brcs	.+6      	; 0x38e <__mulsf3+0x12>
 388:	95 23       	and	r25, r21
 38a:	09 f0       	breq	.+2      	; 0x38e <__mulsf3+0x12>
 38c:	5a c0       	rjmp	.+180    	; 0x442 <__fp_inf>
 38e:	5f c0       	rjmp	.+190    	; 0x44e <__fp_nan>
 390:	11 24       	eor	r1, r1
 392:	ee cf       	rjmp	.-36     	; 0x370 <__fp_szero>

00000394 <__mulsf3x>:
 394:	ca df       	rcall	.-108    	; 0x32a <__fp_split3>
 396:	a0 f3       	brcs	.-24     	; 0x380 <__mulsf3+0x4>

00000398 <__mulsf3_pse>:
 398:	95 9f       	mul	r25, r21
 39a:	d1 f3       	breq	.-12     	; 0x390 <__mulsf3+0x14>
 39c:	95 0f       	add	r25, r21
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	55 1f       	adc	r21, r21
 3a2:	62 9f       	mul	r22, r18
 3a4:	f0 01       	movw	r30, r0
 3a6:	72 9f       	mul	r23, r18
 3a8:	bb 27       	eor	r27, r27
 3aa:	f0 0d       	add	r31, r0
 3ac:	b1 1d       	adc	r27, r1
 3ae:	63 9f       	mul	r22, r19
 3b0:	aa 27       	eor	r26, r26
 3b2:	f0 0d       	add	r31, r0
 3b4:	b1 1d       	adc	r27, r1
 3b6:	aa 1f       	adc	r26, r26
 3b8:	64 9f       	mul	r22, r20
 3ba:	66 27       	eor	r22, r22
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	66 1f       	adc	r22, r22
 3c2:	82 9f       	mul	r24, r18
 3c4:	22 27       	eor	r18, r18
 3c6:	b0 0d       	add	r27, r0
 3c8:	a1 1d       	adc	r26, r1
 3ca:	62 1f       	adc	r22, r18
 3cc:	73 9f       	mul	r23, r19
 3ce:	b0 0d       	add	r27, r0
 3d0:	a1 1d       	adc	r26, r1
 3d2:	62 1f       	adc	r22, r18
 3d4:	83 9f       	mul	r24, r19
 3d6:	a0 0d       	add	r26, r0
 3d8:	61 1d       	adc	r22, r1
 3da:	22 1f       	adc	r18, r18
 3dc:	74 9f       	mul	r23, r20
 3de:	33 27       	eor	r19, r19
 3e0:	a0 0d       	add	r26, r0
 3e2:	61 1d       	adc	r22, r1
 3e4:	23 1f       	adc	r18, r19
 3e6:	84 9f       	mul	r24, r20
 3e8:	60 0d       	add	r22, r0
 3ea:	21 1d       	adc	r18, r1
 3ec:	82 2f       	mov	r24, r18
 3ee:	76 2f       	mov	r23, r22
 3f0:	6a 2f       	mov	r22, r26
 3f2:	11 24       	eor	r1, r1
 3f4:	9f 57       	subi	r25, 0x7F	; 127
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	8a f0       	brmi	.+34     	; 0x41c <__mulsf3_pse+0x84>
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__mulsf3_pse+0x9c>
 3fc:	88 23       	and	r24, r24
 3fe:	4a f0       	brmi	.+18     	; 0x412 <__mulsf3_pse+0x7a>
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	bb 1f       	adc	r27, r27
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	91 50       	subi	r25, 0x01	; 1
 40e:	50 40       	sbci	r21, 0x00	; 0
 410:	a9 f7       	brne	.-22     	; 0x3fc <__mulsf3_pse+0x64>
 412:	9e 3f       	cpi	r25, 0xFE	; 254
 414:	51 05       	cpc	r21, r1
 416:	70 f0       	brcs	.+28     	; 0x434 <__mulsf3_pse+0x9c>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__fp_inf>
 41a:	aa cf       	rjmp	.-172    	; 0x370 <__fp_szero>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	ec f3       	brlt	.-6      	; 0x41a <__mulsf3_pse+0x82>
 420:	98 3e       	cpi	r25, 0xE8	; 232
 422:	dc f3       	brlt	.-10     	; 0x41a <__mulsf3_pse+0x82>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f7 95       	ror	r31
 42e:	e7 95       	ror	r30
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	c1 f7       	brne	.-16     	; 0x424 <__mulsf3_pse+0x8c>
 434:	fe 2b       	or	r31, r30
 436:	88 0f       	add	r24, r24
 438:	91 1d       	adc	r25, r1
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
